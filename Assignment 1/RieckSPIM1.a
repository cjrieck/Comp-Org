# xpim -font 7x14	
	.data
myArray:	.word		0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 # allocates 20 integer spaces in the array
prompt:		.asciiz		"Please enter up to 20 positive integers and a negative to end input"
endl:		.asciiz		"\n"
array_err:	.asciiz		"Array exceeds maximum size. Will not append"
	.text
	.globl main

main:
	# ask user to input numbers
	la		$a1,	myArray #load pointer into a1
	la		$a0,	prompt  #load prompt into a0

	li		$v0,	4		#print out prompt
	syscall

	la 		$a0,	endl
	li 		$v0,	4
	syscall

	# initialization of the min and the max
	# t0 = min
	# t1 = max
    # $t2 = array offset
	li		$t0,	0
	li		$t1,	0
    li      $t2,    0

gather_numbers:
	li		$v0,	5 # read integer into $v0
	move    $t4,	$v0
	syscall


	# check if array is at limit here

	bltz	$t4,	end_append # if enter negative then stop populating list
	sw		$t4,	myArray($t2)

	add		$t2,	$t2, 4 # go to next index in array

	beqz	$t0,	set_min #initialize min with first number entered

	blt 	$t4,	$t0,	set_min

check_max:
	bgt		$t4,	$t1,	set_max

set_max:
	add		$t1,	$t4,	0
	j		gather_numbers

set_min:
	add		$t0,	$t4,	0
	j		check_max

end_append:

    li $v0, 1
    add $a0, $t0, 0
    # la $a0, $t0
    syscall

    li $v0, 1
    add $a0, $t1, 0
    # la $a0, $t1
    syscall

	li 		$v0,	10
	syscall