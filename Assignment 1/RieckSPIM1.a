# xpim -font 7x14	
	.data
myArray:	.byte		80 # allocates 20 integer spaces in the array
prompt:		.asciiz		"Please enter up to 20 positive integers and a negative to end input"
endl:		.asciiz		"\n"
array_err:	.asciiz		"Out of 1-15 range. Terminating program"
min: 		.asciiz 	"MIN: "
max: 		.asciiz 	"MAX: "
mean: 		.asciiz		"MEAN: "
	.text
	.globl main

main:
	# ask user to input numbers
	la		$a1,	myArray #load pointer into a1
	la		$a0,	prompt  #load prompt into a0

	li		$v0,	4		#print out prompt
	syscall

	la 		$a0,	endl
	li 		$v0,	4
	syscall

	# initialization of the min and the max
	# t0 = min
	# t1 = max
    # $t2 = array offset
    # $t3 = array length
    # $t5 = sum
	li		$t0,	0
	li		$t1,	0
    li      $t2,    0
    li 		$t3, 	0
    li 		$t5, 	0

gather_numbers:
	
	bgt     $t3,    20,     set_graph_counter  # if we've filled our list

	li		$v0,	5                  # read integer into $v0
	syscall

    move 	$t4, $v0                   # $t4 holds the value that the user inputted

    beq 	$t4, 	0, 		array_error # if enter a number less than 1		
    bgt 	$t4, 	15, 	array_error # if enter a number above 15

	bltz	$t4,	set_graph_counter         # if enter negative then stop populating list
	
	sw		$t4,	myArray($t2)
	add 	$t3, 	$t3, 	1

	add 	$t5, 	$t5, 	$t4

	add 	$t2,	$t2, 	4          # go to next index in array

	beqz	$t0,	set_min            # initialize min with first number entered

	blt 	$t4,	$t0,	set_min

check_max:
	bgt		$t4,	$t1,	set_max
	j		gather_numbers

set_max:
	add 	$t1,	$t4,	0
	j		gather_numbers

set_min:
	add 	$t0,	$t4,	0
	j		check_max


set_graph_counter:
	li 		$t6, 	1 # keep counter for bar graph range
	li 		$s0, 	4

graph_loop:

	li 		$t2, 	0 # reset array index counter to 0
	li 		$t7, 	0 # keep track of number of ocurrences

	# print out number in range
	li 		$v0, 	1
    addi 	$a0, 	$t6, 	0
    syscall

set_graph:

	bgt 	$t6, 15, finish

gen_graph:

	sw 		$t4, 	myArray($t2)

    beq 	$t4, 	$t6, 	add_bar # if current item in array equals number
    								# we're checking go to add_bar label
    add 	$t2, 	$t2, 	4 		# loop through list
    j 		set_graph

add_bar:
	
	# print out 0 for bar
	li 		$v0, 	1
    li 		$a0, 	0
    syscall
	

    add 	$t2, 	$t2, 	4 # loop through list

    # check to see if at end of the list
    div 	$t2, 	$s0
    mflo 	$s1
    beq 	$s1, 	$t3, 	increment_number

    j 		set_graph

increment_number:
	
	add 	$t6, 	$t6, 	1

	la      $a0,    endl
    li      $v0, 	4
    syscall

	j 	graph_loop


finish:

	li 		$v0, 	1
    addi 	$a0, 	$t3, 	0
    syscall

	la      $a0,    endl
    li      $v0, 	4
    syscall

	# print out min and max
	# ----------------------
	la      $a0,    min
    li      $v0, 	4
    syscall

    li 		$v0, 	1
    addi 	$a0, 	$t0, 	0
    syscall

    la      $a0,    endl
    li      $v0, 4
    syscall

    la      $a0,    max
    li      $v0, 4
    syscall

    li $v0, 1
    addi $a0, $t1, 0
    syscall
    # ----------------------

    # print mean
    # ----------------------
	la      $a0,    endl
    li      $v0, 4
    syscall
    
    la      $a0,    mean
    li      $v0, 4
    syscall

    li $v0, 1
    div  $t5, $t3
    mflo $a0
    syscall
    # -----------------------

	li 		$v0,	10
	syscall

array_error:
	la      $a0,    endl
    li      $v0, 4
    syscall

    la      $a0,    array_err
    li      $v0, 4
    syscall

	li 		$v0,	10
	syscall
