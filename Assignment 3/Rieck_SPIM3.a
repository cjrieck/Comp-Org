#-----------------------------------------------------------+
# Author: Clayton Rieck                                     |
#-----------------------------------------------------------+
# DESCRIPTION:                                              |
# This program finds the n'th Fibonacci number where        |
# 0 <= n <= 44                                              |
#-----------------------------------------------------------+
# INPUT:                                                    |
# The user will input an integer between 0 and 44 inclusive.|
#-----------------------------------------------------------+
# OUTPUT:                                                   |
# The program will output the n'th number in the Fibonacci  |
# sequence and the sum of all th terms leading up to that   |
# number. It was also display the sequence in reverse order.|
#-----------------------------------------------------------+        
        .data
prompt:        .asciiz        "Enter a number between 0 and 44: "
test:          .asciiz        "TEST"
endl:          .asciiz        "\n"
        .text
        .globl main

main:
    
    # print the prompt
    la   $a0,    prompt
    li   $v0,    4
    syscall

    # read in int
    li   $v0,    5
    syscall

    # moves inputted value to $a0
    # $a0 = fib term
    move $a0,    $v0

    # $a1 = initial summation
    li   $a1,    0
    
    jal  fib

done:
    li   $v0,    10
    syscall

# -------------------------------
        .data
zero:          .asciiz        "Summation: "
        .text

# -------------------------------\
# Function that ultimately calls  \
# calls the recursive function     \
#-----------------------------------
fib:
    # adjust stack pointer
    addi  $sp,    $sp,    -20

    # t0 = fib term
    # t1 = summation
    move  $t0,    $a0
    move  $t1,    $a1

    # if user entered 0
    bne   $t0,    $zero,    start_fib

    la    $a0,    zero    
    li    $v0,    4
    syscall
    
    # print 0
    li    $a0,    0    
    li    $v0,    1
    syscall

    la    $a0,    endl    
    li    $v0,    4
    syscall

    j     $ra

# -------------------------------\
# Branch that jumps and links     \
# to the recursive function        \
#-----------------------------------
start_fib:

    # a0 = fib term
    # a1 = first fib term
    # a2 = second fib term
    # a3 = summation
    move  $a0,    $t0
    li    $a1,    0
    li    $a2,    1
    move  $a3,    $t1

    jal   smart_fib

    j     done

# -------------------------------
        .data
hi_prompt:       .asciiz        "N'th Fibonacci Number: "
sum:             .asciiz        "Summation:             "
sequence:        .asciiz        "Sequence: \n"
        .text

# -------------------------------\
# Recursive function definition   \
# ARGS: n    => term in sequence   \
#       p1   => previous' previous  \
#       p2   => previous number      \
#       sum  => summation (intial 0)  \
#--------------------------------------
smart_fib:
    
    # adjust stack pointer
    addi  $sp,    $sp,    -28

    # move arguments to temp registers
    # for later use
    move  $t0,    $a0
    move  $t1,    $a1
    move  $t2,    $a2
    move  $t3,    $a3
    
    # compute the sum (sum = sum + second_arg)
    add   $t3,    $t3,    $t2

    bne   $t0,    0,      recurse  # if nth term equals 0
    
    move  $v0,    $t2              # return current term (1)
    move  $v1,    $t3              # return current sum (0+1)
    add   $sp,    $sp,    28
    j     $ra

# -------------------------------\
# Branch that continues the       \ 
# recursive function when the      \
# input is not 0                    \
#------------------------------------
recurse: 

    # p1+p2
    add   $t4,    $t2,    $t1
    
    # store local variables in frame
    sw    $t0,    0($sp)           # store fib term
    sw    $t2,    4($sp)           # store p2
    sw    $t4,    8($sp)           # store p1 + p2
    sw    $t3,    12($sp)          # store summation
    sw    $ra,    16($sp)          # store return address

    sw    $t2,    20($sp)
    sw    $t3,    24($sp)

    # n = n - 1
    addi  $t0,    $t0,    -1

    # smart_fib(n-1, p2, p2+p1, summation) (python equivalent)
    move  $a0,    $t0
    move  $a1,    $t2
    move  $a2,    $t4
    move  $a3,    $t3

    jal   smart_fib

    # move down the stack

    lw   $t1,    0($sp)               # fib term (n)

    # if n doesn't equal 1
    # just print out next fib number in
    # the sequence
    bne   $t1,   1,    move_down

    la    $a0,    endl    
    li    $v0,    4
    syscall

    la    $a0,    hi_prompt    
    li    $v0,    4
    syscall
    
    # print p2 (fib number at n'th position)
    lw    $a0,    4($sp)    
    li    $v0,    1
    syscall

    la    $a0,    endl    
    li    $v0,    4
    syscall

    la    $a0,    sum    
    li    $v0,    4
    syscall

    # print current summation
    lw    $a0,    12($sp)    
    li    $v0,    1
    syscall

    la    $a0,    endl    
    li    $v0,    4
    syscall

    la    $a0,    endl    
    li    $v0,    4
    syscall
    
    # print sequence prompt
    la    $a0,    sequence    
    li    $v0,    4
    syscall

# -------------------------------\
# Handles the printing of the     \
# sequence as we move down the call\
# stack                             \
#------------------------------------
move_down:

    # load current fib number into a0
    # to be printed
    lw    $a0,    4($sp)    
    li    $v0,    1
    syscall

    la    $a0,    endl    
    li    $v0,    4
    syscall

    # load back the return address for 
    # the last call
    lw    $ra,    16($sp)

    # adjust the stack pointer
    addi  $sp,    $sp,     28

    j     $ra
