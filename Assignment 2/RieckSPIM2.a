#-----------------------------------------------------------+
# Author: Clayton Rieck                                     |
#-----------------------------------------------------------+
# DESCRIPTION:                                              |
# This program finds the total cost of using a gas pump at  |
# Cowberland Farms and rounds the result to the nearest     |
# penny.                                                    |
#-----------------------------------------------------------+
# INPUT:                                                    |
# The user will input their payment type (S for SmahtPay,   |
# C for Credit or Q for Quitting). Then they'll enter a type|
# of gas they want to fill their car with (R for regular,   |
# P for Premium, or S for Super). Lastly, they'll enter the |
# number of gallons they'd like to fill as a single         |
# precision floating point number.                          |
#-----------------------------------------------------------+
# OUTPUT:                                                   |
# The program will output a receipt including the payment   |
# type chosen, the type of gas chosen, the number of gallons|
# they wanted to fill as a single precision floating point  |
# number, the price per gallon as a single precision float, |
# and the total cost rounded to the nearest penny and       |
# truncated to only 2 decimal places.                       |
#-----------------------------------------------------------+
    .data
integer:       .word      0 # used to store converted total cost
done_prompt:   .asciiz    "\nThank you for choosing Cowberland Farms! Have a great day!"
endl:          .asciiz    "\n"    
    .text
    .globl main

main:

#-----------------------------------------------------
# Begins while loop that continues until 'Q' or 'q'   \
# is typed                                             \
#--------------------------------------------------------
transaction_start:

	jal    getPaymentAndType

    # arguments peing passed to getGasAmount procedure
    mov.s $f12,    $f0 # amount of gallons user wants
    mov.s $f13,    $f1 # price per gallon

    jal    getGasAmount

    jal    printReceipt

    j      transaction_start

done:

    la    $a0,    done_prompt

    li    $v0,    4
    syscall

    li    $v0,    10
    syscall

# ___________________________________________
#                                            \
# NAME:      getPaymentAndType                \
# ARGUMENTS: None                             |
# RETURN:    1) Number of gallons user wants  |
#            2) Price per gallon              |
# PURPOSE:   Takes in how many gallons a user |
#            wants to fill and payment type   |
#            and determines the price based   |
#            on payment type. It also applies |
#            a discount of 10 cents to        |
#            SmahtPay users                   |
# ____________________________________________|
    .data
pay_prompt:           .asciiz    "Please enter a payment type\n's': SmahtPay\n'c': Credit\n'q': Complete Transaction\n> "
gas_prompt:           .asciiz    "Please choose gas type:\nType        Code    Price\nRegular      R      3.619\nPlus         P      3.719\nSuper        S      3.839\n> "
gas_amount_prompt:    .asciiz    "\nPlease enter how many gallons of gas you'd like:\n> "    
    .text

getPaymentAndType:
    
    # ascii values for 'Q' and 'q' respectively
    li    $t0,    81
    li    $t1,    113

    # ascii values for 'S' and 's' respectively
    li    $t2,    83
    li    $t3,    115

    # ascii values for 'C' and 'c' respectively
    li    $t4,    67
    li    $t5,    99

	# display payment prompt
    la    $a0,    pay_prompt

    li    $v0,    4
    syscall

    # read in a character
    li    $v0,    12
    syscall

    # move character read in into $s0
    move  $s0,    $v0

    # check if input is 'Q' or 'q'
    beq    $s0,    $t0,    done
    beq    $s0,    $t1,    done

    la    $a0,    endl

    li    $v0,    4
    syscall

    # display payment prompt
    la    $a0,    gas_prompt

    li    $v0,    4
    syscall

    # read in a character
    li    $v0,    12
    syscall

    move  $s1,    $v0

    # s0 = payment type
    # s1 = gas type

    # store price of gas type
    # 'S' already stored in $t2
    li    $t6,    82    # ascii value for 'R'
    li    $t7,    80    # ascii value for 'P'

    beq   $s1,    $t6,    regular    # get price for regular gas
    beq   $s1,    $t7,    plus       # get price for plus gas
    beq   $s1,    $t2,    super      # get price for super gas

    # set the price depending on the gas the user chose

#-----------------------------------------------------
# If Regular, set price to 3.619                       \
#--------------------------------------------------------
regular:
    li.s  $f21,   3.619
    j     amount

#-----------------------------------------------------
# If Plus, set price to 3.719                          \
#--------------------------------------------------------
plus:
    li.s  $f21,   3.719
    j     amount

#-----------------------------------------------------
# If Super, set price to 3.839                         \
#--------------------------------------------------------
super:
    li.s  $f21,   3.839
    j     amount

#-----------------------------------------------------
# Checks if the user is using SmahtPay and if they are \
# then the program reduces the price per gallon by 10   \
# cents                                                  \
#---------------------------------------------------------
amount:

    # check if not using SmahtPay
    beq   $s0,    $t4,    no_discount
    beq   $s0,    $t5,    no_discount

    li.s  $f24,    0.1

    # give 10 cent discount per gallon if using SmahtPay
    sub.s $f21,   $f21,    $f24

#-----------------------------------------------------
# Takes in the amount of gallons they want to fill    \
#-------------------------------------------------------
no_discount:
    # ask for the amount of gas they want
    la    $a0,    gas_amount_prompt

    li    $v0,    4
    syscall

    # read in float for gallons
    li    $v0,    6
    syscall

    mov.s   $f1,    $f21

    # f0 = gallons of gas user wants
    # f1 = price per gallon
    # $f0 and $f1 get passed back as a return values

    j    $ra

# ___________________________________________
#                                            \
# NAME:      getGasAmount                     \
# ARGUMENTS: 1) Number of gallons user wants  |
#            2) Price per gallon              |
# RETURN:    None                             |
# PURPOSE:   Takes in how many gallons a user |
#            wants to fill and the price from |
#            the getPaymentAndType procedure. |
#            The total price is calculated    |
#            and then rounded to the nearest  |
#            while also truncating extra      |
#            decimal spots.                   |
# ____________________________________________|
    .data
dot:         .asciiz        "."
    .text

getGasAmount:

    mov.s    $f20,    $f0
    mov.s    $f21,    $f1

    #f20 = gallons
    #f21 = price

    la    $a0,    endl
    li    $v0,    4
    syscall

    # ascii values for 'S' and 's' respectively
    li    $t2,    83
    li    $t3,    115

    # multiply gallons and price to get total
    mul.s $f22,   $f21,    $f20

    # f22 = price (NOT ROUNDED)

    # --------- start truncating decimal points ---------

    # multiply by 100.0 to set up for integer
    # representation of price
    li.s  $f5,    100.0
    mul.s $f22,   $f22,    $f5

    # add 0.5 for rounding to nearest penny
    li.s  $f5,    0.5
    add.s $f22,   $f22,    $f5

    cvt.w.s $f22,  $f22 # convert single precision to int

    # store float in a word
    s.s   $f22,    integer
    
    # load that new integer back into an int register
    lw    $t0,     integer

    # divide the integer by 100 and get
    # left hand side of total price in LO 
    # and right hand side in HI
    li    $t1,    100
    div   $t0,    $t1

    mflo  $s4 # move LO to s4
    mfhi  $s5 # move HI to s5

    # $s4 = left hand side of decimal
    # $s5 = right hand side of decimal

    j     $ra

# ___________________________________________
#                                            \
# NAME:      printReceipt                     \
# ARGUMENTS: None                             |
# RETURN:    None                             |
# PURPOSE:   Outputs the resulting receipt    |
#            onto the screen using the info   |
#            inputted and calculated in the   |
#            previous 2 procedures.           |
# ____________________________________________|
        .data
padding1:       .asciiz        " "
padding2:       .asciiz        "  "
padding4:       .asciiz        "    "
padding8:       .asciiz        "        "
title:          .asciiz        "Cowberland Farms"
gasAndPayType:  .asciiz        "Payment Type        Gas Type"
gallons:        .asciiz        "Gallon(s)"
costPerGallon:  .asciiz        "$/Gallons"
total:          .asciiz        "Total"        
        .text

printReceipt:

    la    $a0,    padding8
    li    $v0,    4
    syscall

    la    $a0,    title
    li    $v0,    4
    syscall

    la    $a0,    endl
    li    $v0,    4
    syscall

    la    $a0,    endl
    li    $v0,    4
    syscall

    la    $a0,    padding2
    li    $v0,    4
    syscall

    la    $a0,    gasAndPayType
    li    $v0,    4
    syscall

    la    $a0,    endl
    li    $v0,    4
    syscall

    la    $a0,    padding4
    li    $v0,    4
    syscall

    la    $a0,    padding2
    li    $v0,    4
    syscall

    # print out payment type
    move  $a0,    $s0
    li    $v0,    11
    syscall

    la    $a0,    padding8
    li    $v0,    4
    syscall

    la    $a0,    padding8
    li    $v0,    4
    syscall

    la    $a0,    padding4
    li    $v0,    4
    syscall

    # print out gas type
    move  $a0,    $s1
    li    $v0,    11
    syscall

    la    $a0,    endl
    li    $v0,    4
    syscall

    la    $a0,    endl
    li    $v0,    4
    syscall

    la    $a0,    padding2
    li    $v0,    4
    syscall

    la    $a0,    gallons
    li    $v0,    4
    syscall

    la    $a0,    padding8
    li    $v0,    4
    syscall

    la    $a0,    padding2
    li    $v0,    4
    syscall

    la    $a0,    padding1
    li    $v0,    4
    syscall

    la    $a0,    costPerGallon
    li    $v0,    4
    syscall

    la    $a0,    endl
    li    $v0,    4
    syscall

    la    $a0,    padding1
    li    $v0,    4
    syscall

    # just print a float because the number
    # of gallons are already in $f12
    li    $v0,    2
    syscall

    la    $a0,    padding8
    li    $v0,    4
    syscall

    la    $a0,    padding2
    li    $v0,    4
    syscall

    la    $a0,    padding1
    li    $v0,    4
    syscall

    # moves price/gallon to $f12 to be
    # printed out
    mov.s $f12,    $f13
    li    $v0,    2
    syscall  

    la    $a0,    endl
    li    $v0,    4
    syscall

    la    $a0,    endl
    li    $v0,    4
    syscall

    la    $a0,    padding8
    li    $v0,    4
    syscall

    la    $a0,    padding4
    li    $v0,    4
    syscall

    la    $a0,    padding2
    li    $v0,    4
    syscall

    la    $a0,    total
    li    $v0,    4
    syscall

    la    $a0,    endl
    li    $v0,    4
    syscall

    la    $a0,    padding8
    li    $v0,    4
    syscall    

    la    $a0,    padding4
    li    $v0,    4
    syscall 

    la    $a0,    padding2
    li    $v0,    4
    syscall 

    move  $a0,   $s4
    li    $v0,    1
    syscall

    la    $a0,    dot
    li    $v0,    4
    syscall

    # checks if price is 0.0
    # if it is then add another 0 to right hand side
    # else, print remainder
    bne   $s5,    $zero,     not_zero

    li    $a0,    0
    li    $v0,    1
    syscall

#-----------------------------------------------------
# Acts as a branch when the remainder is not 0        \
#-------------------------------------------------------
not_zero:

    # check if remainder is less than or 
    # equal to 10
    li    $t1,   10
    bgt   $s5,   $t1,    no_zero_before

    # puts an extra 0 before remainder
    # if remainder less than 10
    li    $a0,    0
    li    $v0,    1
    syscall

#-----------------------------------------------------
# Acts as a branch when the remainder is less than 10 \
#-------------------------------------------------------
no_zero_before:

    move  $a0,   $s5
    li    $v0,    1
    syscall

    la    $a0,    endl
    li    $v0,    4
    syscall

    la    $a0,    endl
    li    $v0,    4
    syscall 

    j    $ra        